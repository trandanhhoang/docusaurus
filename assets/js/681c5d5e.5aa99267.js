"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6378],{5368:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var i=n(5893),s=n(1151);const r={sidebar_position:4},a="Quick sort",l={id:"algorithm/quick-sort",title:"Quick sort",description:"- We will learn some keyword, notation, statement in english.",source:"@site/docs/algorithm/quick-sort.md",sourceDirName:"algorithm",slug:"/algorithm/quick-sort",permalink:"/docs/algorithm/quick-sort",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Quick sort",permalink:"/docs/algorithm/merge-sort"},next:{title:"heap-sort",permalink:"/docs/algorithm/heap-sort"}},o={},c=[{value:"Code in java",id:"code-in-java",level:2},{value:"Complexity and Analysis the time complexity of average case",id:"complexity-and-analysis-the-time-complexity-of-average-case",level:2}];function h(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"quick-sort",children:"Quick sort"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"We will learn some keyword, notation, statement in english."}),"\n",(0,i.jsxs)(t.li,{children:["Let say we have the following array ",(0,i.jsx)(t.code,{children:"[2,7,4,1,5,3,6]"}),", and we want it sorted in increasing order.","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"we will use the pivot (\u02c8piv\u0259t) in this algorithm, and code recursively."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"code-in-java",children:"Code in java"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"public static void main(String[] args) {\n//        List<Integer> integers = Arrays.asList(2, 7, 4, 1, 5, 3, 6);\n//        List<Integer> integers = Arrays.asList(5,6);\n//        List<Integer> integers = Arrays.asList(6,5);\n  List<Integer> integers = Arrays.asList(2, 7, 4, 1);\n\n  int size = integers.size();\n\n  quickSort(integers, 0, size - 1);\n\n  System.out.println(integers);\n}\n\nprivate static void quickSort(List<Integer> integers, int left, int right) {\n  if (left >= right) return;\n\n  int pivot = left + (right - left) / 2;\n  swap(integers, pivot, right);\n  int localRight = right - 1;\n  int localLeft = left;\n\n  while (localLeft <= localRight) {\n    while (integers.get(localLeft) < integers.get(right)) {\n      localLeft++;\n    }\n    while (localRight >= 0  && integers.get(localRight) > integers.get(right)) {\n      localRight--;\n    }\n    if (localLeft > localRight) {\n      break;\n    }\n    swap(integers, localLeft, localRight);\n  }\n  swap(integers, localLeft, right);\n\n  quickSort(integers, left, localLeft - 1);\n  quickSort(integers, localLeft + 1, right);\n}\n\n\nprivate static void swap(List<Integer> integers, int left, int right) {\n  int temp = integers.get(left);\n  integers.set(left, integers.get(right));\n  integers.set(right, temp);\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"complexity-and-analysis-the-time-complexity-of-average-case",children:"Complexity and Analysis the time complexity of average case"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"We call C(N) is the number of comparison perform in quicksort."}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"N-1 is a number of comparison to divide array into 2 array that the left array always less than the pivot and the right array larger than pivot."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"We will have formula below for the best case"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"C(N) = N - 1 + 2*C(N/2) , C(0) = C(1) = 0"}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.img,{alt:"quick sort best case",src:n(9766).Z+"",width:"1536",height:"2048"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Worst case"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"C(N) = N - 1 + C(N-1) + C(1), C(0) = C(1) = 0"}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.img,{alt:"quick sort worst case",src:n(9180).Z+"",width:"2408",height:"1306"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Average case"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"C(N) = N - 1 + C(k) + C(N-k), C(0) = C(1) = 0"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["reference: ",(0,i.jsx)(t.a,{href:"https://homepages.math.uic.edu/~leon/cs-mcs401-r07/handouts/quicksort-continued.pdf",children:"https://homepages.math.uic.edu/~leon/cs-mcs401-r07/handouts/quicksort-continued.pdf"})]}),"\n"]}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},9766:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/quicksort-bestcase-0e69fbf98899405a0b51ccfa6d512436.jpeg"},9180:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/quicksort-worstcase-7f17d64d6eb07c77626acf67752fa5e0.jpeg"},1151:(e,t,n)=>{n.d(t,{Z:()=>l,a:()=>a});var i=n(7294);const s={},r=i.createContext(s);function a(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);