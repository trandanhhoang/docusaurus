"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6428],{4662:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>o});var r=i(5893),s=i(1151);const a={sidebar_position:1},t="Effective java",l={id:"book/effective-java",title:"Effective java",description:"Chapter 2: Creating and Destroying Objects",source:"@site/docs/book/effective-java.md",sourceDirName:"book",slug:"/book/effective-java",permalink:"/docs/book/effective-java",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Book",permalink:"/docs/category/book"},next:{title:"Garbage collector",permalink:"/docs/book/Garbage collector"}},c={},o=[{value:"Chapter 2: Creating and Destroying Objects",id:"chapter-2-creating-and-destroying-objects",level:2},{value:"Use static factory method instead of constructor",id:"use-static-factory-method-instead-of-constructor",level:3},{value:"Use builder when face with many constructor parameters",id:"use-builder-when-face-with-many-constructor-parameters",level:3},{value:"DI to hardwiring resources",id:"di-to-hardwiring-resources",level:3},{value:"Avoid creating unnecessary object",id:"avoid-creating-unnecessary-object",level:3},{value:"Prefer try-with-resources to try-finally.",id:"prefer-try-with-resources-to-try-finally",level:3},{value:"Methods common to all objects",id:"methods-common-to-all-objects",level:2},{value:"Obey the general contract when overriding equals",id:"obey-the-general-contract-when-overriding-equals",level:3},{value:"the recipe for a high-quality equals method:",id:"the-recipe-for-a-high-quality-equals-method",level:4},{value:"always override hashCode when override equals",id:"always-override-hashcode-when-override-equals",level:3},{value:"Override clone",id:"override-clone",level:3},{value:"chapter 4: Classes and Interfaces",id:"chapter-4-classes-and-interfaces",level:2},{value:"Minimize the acce\\ssibility of classes and members",id:"minimize-the-accessibility-of-classes-and-members",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"effective-java",children:"Effective java"}),"\n",(0,r.jsx)(n.h2,{id:"chapter-2-creating-and-destroying-objects",children:"Chapter 2: Creating and Destroying Objects"}),"\n",(0,r.jsx)(n.h3,{id:"use-static-factory-method-instead-of-constructor",children:"Use static factory method instead of constructor"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Boolean valueOf(boolean b) {\n    return b ? Boolean.TRUE : Boolean.FALSE;\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Naming: from, of, getInstance.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Date d = Date.from(instant)"}),";"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Set<Rank> faceCards = EnumSet.of(JACK, QUEEN, KING)"}),";"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"StackWalker luke = StackWalker.getInstance(options)"}),";"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"use-builder-when-face-with-many-constructor-parameters",children:"Use builder when face with many constructor parameters"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Builder Pattern\npublic class NutritionFacts {\n    private final int servingSize;\n    private final int carbohydrate;\n    public static class Builder {\n        // Required parameters\n        private final int servingSize;\n        private int carbohydrate = 0;\n        public Builder(int servingSize, int servings) {\n            this.servingSize = servingSize;\n        }\n        public Builder carbohydrate(int val)\n        { carbohydrate = val; return this; }\n        public NutritionFacts build() {\n            return new NutritionFacts(this);\n        }\n    }\n    private NutritionFacts(Builder builder) {\n        servingSize = builder.servingSize;\n        carbohydrate = builder.carbohydrate;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"NutritionFacts cocaCola = new NutritionFacts.Builder(240)\n    .carbohydrate(27).build();\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Hierarchies"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Builder pattern for class hierarchies\npublic abstract class Pizza {\n    public enum Topping { HAM, MUSHROOM, ONION, PEPPER, SAUSAGE }\n    final Set<Topping> toppings;\n    abstract static class Builder<T extends Builder<T>> {\n        EnumSet<Topping> toppings = EnumSet.noneOf(Topping.class);\n        public T addTopping(Topping topping) {\n            toppings.add(Objects.requireNonNull(topping));\n            return self();\n        }\n        abstract Pizza build();\n        // Subclasses must override this method to return "this"\n        protected abstract T self();\n    }\n    Pizza(Builder<?> builder) {\n        toppings = builder.toppings.clone(); // See Item 50\n    }\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public class NyPizza extends Pizza {\n    public enum Size { SMALL, MEDIUM, LARGE }\n    private final Size size;\n    public static class Builder extends Pizza.Builder<Builder> {\n        private final Size size;\n        public Builder(Size size) {\n        this.size = Objects.requireNonNull(size);\n        }\n        @Override public NyPizza build() {\n        return new NyPizza(this);\n        }\n        @Override protected Builder self() { return this; }\n    }\n    private NyPizza(Builder builder) {\n        super(builder);\n        size = builder.size;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"NyPizza pizza = new NyPizza.Builder(SMALL)\n.addTopping(SAUSAGE).addTopping(ONION).build();\n"})}),"\n",(0,r.jsx)(n.h3,{id:"di-to-hardwiring-resources",children:"DI to hardwiring resources"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["example with spellchecker + dictionary:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"spellchecker for each language need its own dictionary"}),"\n",(0,r.jsx)(n.li,{children:"We don't use utility class (static method) or singleton here, should be using DI"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public class SpellChecker{\n    private final Dictionary dict;\n    public SpellChecker(Dictinary dict){\n        this.dict = dicts;\n    }\n    // some public method\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"DI help we work with many type of resources."}),"\n",(0,r.jsx)(n.li,{children:"pass resource by using method factory pattern with bounded wildcard type"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"Mosaic create(Supplier<? extends Tile> tileFactory){'...'};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"avoid-creating-unnecessary-object",children:"Avoid creating unnecessary object"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"While String.matches is the easiest way to check if a string matches\na regular expression, it\u2019s not suitable for repeated use in performance-critical\nsituations"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'static boolean isRomanNumeral(String s) {\n    return s.matches("^(?=.)M*(C[MD]|D?C{0,3})"\n    + "(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$");\n}\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"increase performance way by create a Pattern instance."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Reusing expensive object for improved performance\npublic class RomanNumerals {\n    private static final Pattern ROMAN = Pattern.compile(\n        "^(?=.)M*(C[MD]|D?C{0,3})"\n        + "(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$");\n    static boolean isRomanNumeral(String s) {\n        return ROMAN.matcher(s).matches();\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Another example"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Hideously slow! Can you spot the object creation?\nprivate static long sum() {\n    Long sum = 0L;\n    for (long i = 0; i <= Integer.MAX_VALUE; i++)\n        sum += i;\n    \n    return sum;\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"reduces the runtime from 6.3 seconds to 0.59 seconds on my machine."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"prefer-try-with-resources-to-try-finally",children:"Prefer try-with-resources to try-finally."}),"\n",(0,r.jsx)(n.h2,{id:"methods-common-to-all-objects",children:"Methods common to all objects"}),"\n",(0,r.jsx)(n.h3,{id:"obey-the-general-contract-when-overriding-equals",children:"Obey the general contract when overriding equals"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"How to implement well-behaved equals() method."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Reflexive: x.equals(x) is true"}),"\n",(0,r.jsxs)(n.li,{children:["Symmetric: x.equals(y) is true if and only if y.equals(x) is true","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Can be violated if check case sensitive of string (just cast the first String))","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"example: a vs A, A vs a."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Transitive: x.equals(y) is true and y.equals(z) is true, then x.equals(z) is true","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"ColorPoint p1 = new ColorPoint(1, 2, Color.RED);"}),"\n",(0,r.jsx)(n.li,{children:"Point p2 = new Point(1, 2);"}),"\n",(0,r.jsx)(n.li,{children:"ColorPoint p3 = new ColorPoint(1, 2, Color.BLUE);"}),"\n",(0,r.jsx)(n.li,{children:"p1=p2, p2=p3 but p1!=p3."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Consistent: x.equals(y) returns the same result if called multiple times"}),"\n",(0,r.jsx)(n.li,{children:"For any non-null reference value x, x.equals(null) should return false"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"\u201cFavor composition over inheritance.\u201d"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"the-recipe-for-a-high-quality-equals-method",children:"the recipe for a high-quality equals method:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public final class PhoneNumber{\n    private final short areaCode, prefix, lineNum;\n    @Override public boolean equals(Object o){\n        // 1. Use the == operator to check if the argument is a reference to this object\n        if(o == this) return true;\n        // 2. Use the instanceof operator to check if the argument has the correct type\n        if(!(o instanceof PhoneNumber)) return false;\n        PhoneNumber pn = (PhoneNumber)o;\n        return pn.lineNum == lineNum && pn.prefix == prefix && pn.areaCode == areaCode;\n    }\n    \n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"always-override-hashcode-when-override-equals",children:"always override hashCode when override equals"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"How to implement well-behaved hashCode() method."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Override public int hashCode() {\n    int result = Short.hashCode(areaCode);\n    result = 31 * result + Short.hashCode(prefix);\n    result = 31 * result + Short.hashCode(lineNum);\n    return result;\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Can using library ",(0,r.jsx)(n.a,{href:"https://www.baeldung.com/introduction-to-autovalue",children:"https://www.baeldung.com/introduction-to-autovalue"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"override-clone",children:"Override clone"}),"\n",(0,r.jsx)(n.h2,{id:"chapter-4-classes-and-interfaces",children:"chapter 4: Classes and Interfaces"}),"\n",(0,r.jsx)(n.h3,{id:"minimize-the-accessibility-of-classes-and-members",children:"Minimize the acce\\ssibility of classes and members"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"For top-level (non-nested) classes and interfaces, there are only two possible\naccess levels: package-private and public. If you declare a top-level class or\ninterface with the public modifier, it will be public; otherwise, it will be packageprivate. If a top-level class or interface can be made package-private, it should be.\nBy making it package-private, you make it part of the implementation rather than\nthe exported API, and you can modify it, replace it, or eliminate it in a subsequent\nrelease without fear of harming existing clients. If you make it public, you are\nobligated to support it forever to maintain compatibility"}),"\n",(0,r.jsx)(n.li,{children:"If a package-private top-level class or interface is used by only one class,\nconsider making the top-level class a private static nested class of the sole class\nthat uses it"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>l,a:()=>t});var r=i(7294);const s={},a=r.createContext(s);function t(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);