"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6582],{6687:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var r=t(5893),a=t(1151);const i={sidebar_position:1},s="java.util.concurrent",c={id:"java-advance/java-util-concurrent",title:"java.util.concurrent",description:"T\xf3m t\u1eaft",source:"@site/docs/java-advance/java-util-concurrent.md",sourceDirName:"java-advance",slug:"/java-advance/java-util-concurrent",permalink:"/docs/java-advance/java-util-concurrent",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Java-advance",permalink:"/docs/category/java-advance"},next:{title:"AOP (Aspect Oriented Programming)",permalink:"/docs/java-advance/AOP"}},o={},l=[{value:"T\xf3m t\u1eaft",id:"t\xf3m-t\u1eaft",level:2},{value:"Executors",id:"executors",level:3},{value:"Interfaces",id:"interfaces",level:4},{value:"Implementations",id:"implementations",level:4},{value:"Queues",id:"queues",level:3},{value:"Sychronizers",id:"sychronizers",level:3},{value:"Concurrent collections: thread-safe",id:"concurrent-collections-thread-safe",level:3},{value:"Memory Consistency Properties",id:"memory-consistency-properties",level:3}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",ul:"ul",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"javautilconcurrent",children:"java.util.concurrent"}),"\n",(0,r.jsx)(n.h2,{id:"t\xf3m-t\u1eaft",children:"T\xf3m t\u1eaft"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["T\xf3m t\u1eaft l\u1ea1i c\xe1c th\xe0nh ph\u1ea7n c\xf3 trong th\u01b0 vi\u1ec7n java.util.concurrent","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/concurrent/package-summary.html",children:"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/concurrent/package-summary.html"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"executors",children:"Executors"}),"\n",(0,r.jsx)(n.h4,{id:"interfaces",children:"Interfaces"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Executor is a interface for defining custom thread pool, async I/O, task. Task may execute sequantilly or concurrently"}),"\n",(0,r.jsx)(n.li,{children:"ExecutorService manage queuing and scheduleing task, allow control shutdown."}),"\n",(0,r.jsx)(n.li,{children:"Future return the result of a function, provide a means to cancel execution."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"implementations",children:"Implementations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"ThreadPoolExecutor provide tunable, flexible thread pool."}),"\n",(0,r.jsx)(n.li,{children:"FutureTask is a cancellable asynchronous computation."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"queues",children:"Queues"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"// reject request this.queue =  new SynchronousQueue<>(); } else { // limited queue size this.queue = new LinkedBlockingQueue<>(maxQueueSize);"})}),"\n",(0,r.jsx)(n.h3,{id:"sychronizers",children:"Sychronizers"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Semaphore"}),"\n",(0,r.jsx)(n.li,{children:"CountDownLatch"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"concurrent-collections-thread-safe",children:"Concurrent collections: thread-safe"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"this collection don't use lock, it uses CAS(compare and swap) instead."}),"\n",(0,r.jsx)(n.li,{children:"ConcurrentHashMap:"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"memory-consistency-properties",children:"Memory Consistency Properties"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The results of a write by one thread are guaranteed to be visible to a read by another thread only if the write operation happens-before the read operation."}),"\n",(0,r.jsx)(n.li,{children:"synchronized and volatile, as well as thread.start(), thread.join() can form happen-before relationship."}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>s});var r=t(7294);const a={},i=r.createContext(a);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);