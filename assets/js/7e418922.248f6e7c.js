"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6430],{382:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var i=n(5893),r=n(1151);const s={sidebar_position:2},a="Insertion sort",o={id:"algorithm/insertion-sort",title:"Insertion sort",description:"- We will learn some keyword, notation, statement in english.",source:"@site/docs/algorithm/insertion-sort.md",sourceDirName:"algorithm",slug:"/algorithm/insertion-sort",permalink:"/docs/algorithm/insertion-sort",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Binary tree level order traversal using recursive",permalink:"/docs/algorithm/binary-tree-level-order-traversal-recursive"},next:{title:"Binary tree level order traversal using queue",permalink:"/docs/algorithm/binary-tree-level-order-traversal-q"}},l={},d=[{value:"Code in java",id:"code-in-java",level:2},{value:"Analysis the algorithm",id:"analysis-the-algorithm",level:2},{value:"Complexity and Analysis the time complexity of average case",id:"complexity-and-analysis-the-time-complexity-of-average-case",level:2}];function h(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"insertion-sort",children:"Insertion sort"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"We will learn some keyword, notation, statement in english."}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Let say we have the following array ",(0,i.jsx)(t.code,{children:"[2,7,4,1,5,3,6]"}),", and we want it sorted in increasing order."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.li,{children:"we divide array into sorted part in the left and unsorted part, in the right."}),"\n",(0,i.jsx)(t.li,{children:"During each iteration, we will move the chosen element into sorted part that in the left."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"code-in-java",children:"Code in java"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"public static void main(String[] args) {\n        List<Integer> integers = Arrays.asList(2,7,4,1,5,3,6);\n\n        int size = integers.size();\n\n        System.out.println(integers);\n        for (int i = 1; i < size; i++) {\n            for (int j = i; j > 0; j--) {\n                if(integers.get(j) < integers.get(j-1)){\n                    swap(integers,j,j-1);\n                }else{\n                    break;\n                }\n            }\n            System.out.println(integers);\n        }\n    }\n    private static void swap(List<Integer> integers, int left, int right){\n        int temp = integers.get(left);\n        integers.set(left, integers.get(right));\n        integers.set(right,temp);\n    }\n"})}),"\n",(0,i.jsx)(t.h2,{id:"analysis-the-algorithm",children:"Analysis the algorithm"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"The outer loop is start at the index I = 1 of the array, run to the end of the array."}),"\n",(0,i.jsx)(t.li,{children:"The inner loop is start at the index I, run down to the start of the array."}),"\n",(0,i.jsx)(t.li,{children:"The purpose is, we divide array into left and right side at I index, and we will move the element at index I into the left array that make the left array become sorted array after each inner loop."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"complexity-and-analysis-the-time-complexity-of-average-case",children:"Complexity and Analysis the time complexity of average case"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Quite same as the ",(0,i.jsx)(t.a,{href:"https://trandanhhoang.github.io/docs/algorithm/bubble-sort/",children:"bubble sort"})]}),"\n"]})]})}function c(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>a});var i=n(7294);const r={},s=i.createContext(r);function a(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);