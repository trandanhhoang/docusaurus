"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6068],{1930:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var n=t(5893),i=t(1151);const l={sidebar_position:2},o="Binary tree level order traversal using recursive",s={id:"algorithm/binary-tree-level-order-traversal-recursive",title:"Binary tree level order traversal using recursive",description:"- We will learn some keyword, notation, statement in english to solve this problem.",source:"@site/docs/algorithm/binary-tree-level-order-traversal-recursive.md",sourceDirName:"algorithm",slug:"/algorithm/binary-tree-level-order-traversal-recursive",permalink:"/docs/algorithm/binary-tree-level-order-traversal-recursive",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Two sum",permalink:"/docs/algorithm/two-sum"},next:{title:"Insertion sort",permalink:"/docs/algorithm/insertion-sort"}},a={},c=[{value:"Link to problem",id:"link-to-problem",level:2},{value:"Solve with recursive",id:"solve-with-recursive",level:2},{value:"Code in java",id:"code-in-java",level:2},{value:"Analysis complexity of the algorithm",id:"analysis-complexity-of-the-algorithm",level:2}];function d(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"binary-tree-level-order-traversal-using-recursive",children:"Binary tree level order traversal using recursive"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"We will learn some keyword, notation, statement in english to solve this problem."}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"link-to-problem",children:"Link to problem"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"https://leetcode.com/problems/binary-tree-level-order-traversal/description/",children:"https://leetcode.com/problems/binary-tree-level-order-traversal/description/"})}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"solve-with-recursive",children:"Solve with recursive"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["we will iterate the tree from root to leaf with counter variable, first start at 0.","\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"when meet the children at left or right, we increase counter by 1."}),"\n",(0,n.jsx)(r.li,{children:"each time meet a node, we add it into a map with key is the counter, value of the key is the list of result."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"code-in-java",children:"Code in java"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",children:"public List<List<Integer>> levelOrder(TreeNode root) {\n    Map<Integer, List<Integer>> map = new HashMap<>();\n    helper(root, 0, map);\n    List<List<Integer>> result = new ArrayList<>();\n\n    System.out.println();\n    int counter = 0;\n    while (map.containsKey(counter)){\n        result.add(map.get(counter++));\n    }\n    return result;\n}\n\npublic void helper(TreeNode root, int counter, Map<Integer, List<Integer>> map) {\n    if (root == null) {\n        return;\n    }\n\n    if (map.containsKey(counter)) {\n        map.get(counter).add(root.val);\n    } else {\n        List<Integer> list = new ArrayList<>();\n        list.add(root.val);\n        map.put(counter, list);\n    }\n    helper(root.left, counter + 1, map);\n    helper(root.right, counter + 1, map);\n}\n"})}),"\n",(0,n.jsx)(r.h2,{id:"analysis-complexity-of-the-algorithm",children:"Analysis complexity of the algorithm"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"The time complexity is O(N) with N is the length of input array"}),"\n",(0,n.jsx)(r.li,{children:"Space complexity is O(2N) because map cost O(N) and list result cost O(N)."}),"\n"]})]})}function u(e={}){const{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,r,t)=>{t.d(r,{Z:()=>s,a:()=>o});var n=t(7294);const i={},l=n.createContext(i);function o(e){const r=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(l.Provider,{value:r},e.children)}}}]);