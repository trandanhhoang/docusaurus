"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6890],{4322:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var i=n(5893),r=n(1151);const s={},a=void 0,o={id:"algorithm/heap-sort",title:"heap-sort",description:"Code in java",source:"@site/docs/algorithm/heap-sort.md",sourceDirName:"algorithm",slug:"/algorithm/heap-sort",permalink:"/docs/algorithm/heap-sort",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Quick sort",permalink:"/docs/algorithm/quick-sort"},next:{title:"Data structure in english",permalink:"/docs/category/data-structure-in-english"}},g={},c=[{value:"Code in java",id:"code-in-java",level:2}];function l(e){const t={code:"code",h2:"h2",pre:"pre",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"code-in-java",children:"Code in java"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"public static void main(String[] args) {\n        List<Integer> integers = Arrays.asList(2, 4, 3, 5, 1,6,7,8);\n\n        buildHeap(integers);\n        heapSort(integers);\n\n        System.out.println(integers);\n    }\n\n    private static void heapSort(List<Integer> integers) {\n        for (int i = integers.size() - 1; i >=1; i--) {\n            swap(integers, 0, i);\n            heapDown(integers,i,0);\n        }\n    }\n\n    private static void buildHeap(List<Integer> integers) {\n        for (int i = integers.size() / 2 - 1; i >= 0; i--) {\n            heapDown(integers,integers.size(), i);\n        }\n    }\n\n    private static int getLeft(int i) {\n        return i * 2 + 1;\n    }\n\n    private static int getRight(int i) {\n        return i * 2 + 2;\n    }\n\n    private static void heapDown(List<Integer> integers,int size, int i) {\n        int largest = i;\n        int left = getLeft(i);\n        int right = getRight(i);\n        if (left < size && integers.get(left) > integers.get(largest)) {\n            largest = left;\n        }\n        if (right < size && integers.get(right) > integers.get(largest)) {\n            largest = right;\n        }\n        if (largest != i) {\n            swap(integers, largest, i);\n            heapDown(integers,size, largest);\n        }\n    }\n\n    private static void swap(List<Integer> integers, int left, int right) {\n        int temp = integers.get(left);\n        integers.set(left, integers.get(right));\n        integers.set(right, temp);\n    }\n"})})]})}function p(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>a});var i=n(7294);const r={},s=i.createContext(r);function a(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);