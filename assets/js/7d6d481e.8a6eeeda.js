"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[21],{9637:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=e(5893),o=e(1151);const i={},a="Integration Test",s={id:"java-springboot/integration-test-kafka",title:"Integration Test",description:"1. Introduction",source:"@site/docs/java-springboot/integration-test-kafka.md",sourceDirName:"java-springboot",slug:"/java-springboot/integration-test-kafka",permalink:"/docs/java-springboot/integration-test-kafka",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"T\u1ed1i \u01b0u query jdbc khi migration database",permalink:"/docs/java-springboot/optimize-jdbc-query-when-migration-database"},next:{title:"Integration Test",permalink:"/docs/java-springboot/integration-test-v2"}},c={},p=[{value:"1. Introduction",id:"1-introduction",level:2},{value:"Code",id:"code",level:2}];function g(t){const n={code:"code",h1:"h1",h2:"h2",li:"li",pre:"pre",ul:"ul",...(0,o.a)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"integration-test",children:"Integration Test"}),"\n",(0,r.jsx)(n.h2,{id:"1-introduction",children:"1. Introduction"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"B\xe0i n\xe0y s\u1ebd vi\u1ebft d\xf9ng test-container v\u1edbi kafka v\xe0 database."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"code",children:"Code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import java.util.HashMap;\nimport java.util.Map;\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.common.serialization.StringDeserializer;\nimport org.apache.kafka.common.serialization.StringSerializer;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.springframework.kafka.core.DefaultKafkaProducerFactory;\nimport org.springframework.kafka.core.KafkaTemplate;\nimport org.testcontainers.containers.KafkaContainer;\nimport org.testcontainers.junit.jupiter.Container;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.testcontainers.utility.DockerImageName;\nimport reactor.kafka.receiver.ReceiverOptions;\n\n@Testcontainers(disabledWithoutDocker = true)\npublic abstract class KafkaTemplateTest {\n\n    @Container\n    static final KafkaContainer kafka =\n            new KafkaContainer(DockerImageName.parse("confluentinc/cp-kafka:6.2.1"));\n\n    protected static ReceiverOptions<Integer, String> receiverOptions;\n\n    protected static KafkaTemplate<String, String> kafkaTemplate;\n\n    protected static ReceiverOptions<Integer, String> configReceiverOptions() {\n        Map<String, Object> props = new HashMap<>();\n        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafka.getBootstrapServers());\n        props.put(ConsumerConfig.GROUP_ID_CONFIG, "group1");\n        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");\n        return ReceiverOptions.create(props);\n    }\n\n    protected static KafkaTemplate<String, String> initKafkaTemplate() {\n        Map<String, Object> props = new HashMap<>();\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafka.getBootstrapServers());\n        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        return new KafkaTemplate<>(new DefaultKafkaProducerFactory<>(props));\n    }\n\n    @BeforeAll\n    public static void setUpKafkaTemplate() {\n        receiverOptions = configReceiverOptions();\n        kafkaTemplate = initKafkaTemplate();\n    }\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import java.math.BigDecimal;\nimport java.util.HashMap;\nimport java.util.List;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.test.context.ActiveProfiles;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.DynamicPropertyRegistry;\nimport org.springframework.test.context.DynamicPropertySource;\nimport org.testcontainers.containers.PostgreSQLContainer;\nimport org.testcontainers.junit.jupiter.Container;\nimport org.testcontainers.junit.jupiter.Testcontainers;\n\n@Testcontainers(disabledWithoutDocker = true)\n@ContextConfiguration(classes = CpsPostingConsumerTest.class)\n@ComponentScan(\n        basePackages = {\n            "com.finx.transaction.infra*",\n            "com.finx.transaction.core*",\n            "com.finx.transaction.common*",\n        })\n@EnableAutoConfiguration\n@ExtendWith(MockitoExtension.class)\n@ActiveProfiles("test")\nclass CpsPostingConsumerTest extends KafkaTemplateTest {\n    @Container\n    public static PostgreSQLContainer postgres = new PostgreSQLContainer("postgres:15-alpine");\n\n    @DynamicPropertySource\n    static void configureProperties(DynamicPropertyRegistry registry) {\n        registry.add("spring.r2dbc.url", () -> postgres.getJdbcUrl().replace("jdbc", "r2dbc"));\n        registry.add("spring.r2dbc.username", postgres::getUsername);\n        registry.add("spring.r2dbc.password", postgres::getPassword);\n        registry.add("spring.liquibase.url", postgres::getJdbcUrl);\n        registry.add("spring.liquibase.user", postgres::getUsername);\n        registry.add("spring.liquibase.password", postgres::getPassword);\n    }\n\n    @Autowired CardTransactionPostingHandler cardTransactionPostingHandler;\n\n    @Autowired AccountTransactionDao accountTransactionDao;\n\n    @Test\n    void testCancelledTransactions() {\n      // call something that use kafka.\n    }\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-gradle",children:'testImplementation "org.testcontainers:testcontainers:1.19.3"\ntestImplementation "org.testcontainers:junit-jupiter:1.19.3"\ntestImplementation "org.testcontainers:postgresql:1.19.3"\ntestImplementation "org.testcontainers:kafka:1.19.3"\n'})})]})}function u(t={}){const{wrapper:n}={...(0,o.a)(),...t.components};return n?(0,r.jsx)(n,{...t,children:(0,r.jsx)(g,{...t})}):g(t)}},1151:(t,n,e)=>{e.d(n,{Z:()=>s,a:()=>a});var r=e(7294);const o={},i=r.createContext(o);function a(t){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function s(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(o):t.components||o:a(t.components),r.createElement(i.Provider,{value:n},t.children)}}}]);