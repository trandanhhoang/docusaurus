"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[843],{9125:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var t=i(5893),s=i(1151);const r={},o="How thread pool work",a={id:"java-basic/grpc-custom-threadpool",title:"How thread pool work",description:"- When tasks are submitted,",source:"@site/docs/java-basic/grpc-custom-threadpool.md",sourceDirName:"java-basic",slug:"/java-basic/grpc-custom-threadpool",permalink:"/docs/java-basic/grpc-custom-threadpool",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Get dto class from jpa after join table.",permalink:"/docs/java-basic/get-dto-from-join-database"},next:{title:"Map enum with handler",permalink:"/docs/java-basic/map-enum-with-handler"}},c={},l=[];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"how-thread-pool-work",children:"How thread pool work"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"When tasks are submitted,"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"If the thread pool has not reached the core size, it creates new threads."}),"\n",(0,t.jsx)(n.li,{children:"If the core size has been reached and there is no idle threads, it queues tasks."}),"\n",(0,t.jsx)(n.li,{children:"If the core size has been reached, there is no idle threads, and the queue becomes full, it creates new threads\n(until it reaches the max size)."}),"\n",(0,t.jsx)(n.li,{children:"If the max size has been reached, there is no idle threads, and the queue becomes full, the rejection policy kicks in."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Fixed Thread Pool:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"request go to queue if all thread busy."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Cached Thread Pool:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"request be dropped if number of current thread = max pool size thread."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h1,{id:"code-config-and-purpose",children:"Code config and purpose"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-txt",children:"    serverBuilder\n        .executor(new ThreadPoolExecutor(0, 100,\n            60, TimeUnit.SECONDS,\n            new LinkedBlockingQueue<Runnable>()))\n    ;\n}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["This config is a mix of ",(0,t.jsx)(n.em,{children:"cached"})," and ",(0,t.jsx)(n.em,{children:"fixed"})," thread pool","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["this config set MaxPoolSize = 100","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"LinkedBlockingQueue will put all task in queue, so it will not reject any task."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"After keep alive time (60 seconds), thread in pool will be terminated if handle no task."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-txt",children:"// if server handler more than time config.\n    ((NettyServerBuilder) serverBuilder)\n        // maxConnectionAge: the maximum time a connection may exist before it will be closed\n        .maxConnectionAge(5000, TimeUnit.MILLISECONDS)\n        // maxConnectionAgeGrace: the grace period time  added to the maxConnectionAge\n        .maxConnectionAgeGrace(500, TimeUnit.MILLISECONDS);\n  }\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"this config will close grpc connection after about 5500 milliseconds."}),"\n"]}),"\n",(0,t.jsx)(n.h1,{id:"yml-config",children:"yml config"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:"grpc-server-builder-configuration:\n  core-pool-size: 50 # bank-binding have 4 pods, throughput = 200 request per second.\n  max-pool-size: 500 # just a number when peak request, can handle 2000 request at the same time (not per second)\n  # base-unit: milliseconds\n  keep-alive-time : 300000 # just keep 50 thread (core-pool-size), all new thread will be terminated after 300 seconds = 5 minutes.\n  max-connection-age : 5000\n  max-connection-age-grace : 500\n"})}),"\n",(0,t.jsx)(n.h1,{id:"references",children:"References"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://itecnote.com/tecnote/java-impossible-to-make-a-cached-thread-pool-with-a-size-limit/",children:"https://itecnote.com/tecnote/java-impossible-to-make-a-cached-thread-pool-with-a-size-limit/"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>a,a:()=>o});var t=i(7294);const s={},r=t.createContext(s);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);