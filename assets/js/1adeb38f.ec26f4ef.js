"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[463],{950:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var i=e(5893),o=e(1151);const r={sidebar_position:2},s="Integration test v\u1edbi springboot v\xe0 test-container",a={id:"java-springboot/integration-test-with-springboot-and-test-container",title:"Integration test v\u1edbi springboot v\xe0 test-container",description:"T\xf3m t\u1eaft",source:"@site/docs/java-springboot/integration-test-with-springboot-and-test-container.md",sourceDirName:"java-springboot",slug:"/java-springboot/integration-test-with-springboot-and-test-container",permalink:"/docs/java-springboot/integration-test-with-springboot-and-test-container",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Springboot",permalink:"/docs/category/springboot"},next:{title:"V\xed d\u1ee5 kafka + java springboot",permalink:"/docs/java-springboot/kafka-with-java-springboot-example"}},c={},l=[{value:"T\xf3m t\u1eaft",id:"t\xf3m-t\u1eaft",level:2},{value:"V\u1ea5n \u0111\u1ec1",id:"v\u1ea5n-\u0111\u1ec1",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Code example",id:"code-example",level:2},{value:"References",id:"references",level:2}];function p(t){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",pre:"pre",ul:"ul",...(0,o.a)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"integration-test-v\u1edbi-springboot-v\xe0-test-container",children:"Integration test v\u1edbi springboot v\xe0 test-container"}),"\n",(0,i.jsx)(n.h2,{id:"t\xf3m-t\u1eaft",children:"T\xf3m t\u1eaft"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Ch\xfang ta s\u1ebd vi\u1ebft integration test cho b\xe0i vi\u1ebft c\u0169 (",(0,i.jsx)(n.a,{href:"https://trandanhhoang.github.io/docs/java/how-to-write-library-with-java-springboot",children:"library v\u1edbi annotation, reflection, aop, springboot"}),")","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Ch\xfang ta c\u1ea7n test \u0111\u01b0\u1ee3c th\u01b0 vi\u1ec7n trong 1 project g\u1ed3m database, kafka, .... B\xe0i vi\u1ebft n\xe0y s\u1ebd h\u01b0\u1edbng d\u1eabn b\u1ea1n c\xe1ch t\u1ea1o nh\u1eefng bean c\u1ea7n thi\u1ebft cho qu\xe1 tr\xecnh integration test, thay v\xec mock c\u1ea3 project."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"v\u1ea5n-\u0111\u1ec1",children:"V\u1ea5n \u0111\u1ec1"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Annotation @Idempotent c\u1ea7n SpringContext \u0111\u1ec3 ho\u1ea1t \u0111\u1ed9ng (v\xec ch\xfang ta c\u1ea7n qu\xe9t bean, kh\u1edfi t\u1ea1o bean), nh\u01b0ng n\u1ebfu ch\u1ec9 s\u1eed d\u1ee5ng @SpringBootTest, n\xf3 s\u1ebd load t\u1ea5t c\u1ea3 bean trong project, d\xednh t\u1edbi database hay kafka."}),"\n",(0,i.jsxs)(n.li,{children:["Ch\xfang ta c\xf3 th\u1ec3 ch\u1ec9 \u0111\u1ecbnh Bean mu\u1ed1n kh\u1edfi t\u1ea1o b\u1eb1ng c\xe1ch tr\xean class TestCheckIdempotent, \u0111\xe1nh annotation @SpringBootTest v\xe0 @ContextConfiguration(classes = TestApplication.class)","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"v\u1edbi class TestApplication s\u1ebd kh\u1edfi t\u1ea1o bean ch\xfang ta c\u1ea7n, \u0111\xf3 l\xe0 IdemController(Bean ch\xfang ta mu\u1ed1n test) v\xe0  IdempotentConfiguration(Bean qu\xe9t project v\xe0 t\u1ea1o map IdempotentEngine)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Ch\u1ea1y redis-server b\u1eb1ng docker ho\u1eb7c server."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"code-example",children:"Code example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"import org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.context.annotation.Import;\n@Import({IdempotentConfiguration.class, IdemController.class})\n@EnableAutoConfiguration\npublic class TestApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(com.TestApplication.class, args);\n    }\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.test.context.ActiveProfiles;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.DynamicPropertyRegistry;\nimport org.springframework.test.context.DynamicPropertySource;\nimport org.testcontainers.containers.GenericContainer;\nimport org.testcontainers.junit.jupiter.Container;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.testcontainers.utility.DockerImageName;\n\n@SpringBootTest\n@ActiveProfiles("test")\n@ContextConfiguration(classes = TestApplication.class)\n@Testcontainers(disabledWithoutDocker = true)\n@ExtendWith(MockitoExtension.class)\npublic class TestCheckIdempotent {\n\n    @Autowired private IdemController idemController;\n\n    // @MockBean private: n\u1ebfu IdemController c\u1ea7n argument, \u0111\xe1nh d\u1ea5u @MockBean \n\n    @Container\n    static final GenericContainer redis =\n            new GenericContainer(DockerImageName.parse("redis:5.0.3-alpine")).withExposedPorts(6379);\n\n    @DynamicPropertySource\n    static void overrideProperties(DynamicPropertyRegistry registry) {\n        registry.add("spring.data.redis.port", redis::getFirstMappedPort);\n    }\n\n    @Test\n    public void testIdempotent() {\n        // given\n        Request request = new Request("hoang",23);\n        // verify\n        idemController.idempotent("something",request);\n        Assertions.assertThrows(\n                RuntimeException.class, () -> idemController.idempotent("the right request is same with above",request));\n    }\n    \n}\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"file application.yml"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"spring:\n  data:\n    redis:\n      host: ${REDIS_HOST:localhost}\n      port: ${REDIS_PORT:6379}\n      password: ${REDIS_PASSWORD:}\n      timeout: 10000\n      ssl:\n        enabled: ${REDIS_SSL:false}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"file build.gradle"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"implementation 'org.springframework.boot:spring-boot-starter'\ntestImplementation \"org.testcontainers:testcontainers:1.19.3\"\ntestImplementation \"org.testcontainers:junit-jupiter:1.19.3\"\ntestImplementation 'org.springframework.boot:spring-boot-starter-test'\n"})}),"\n",(0,i.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["test-container: ",(0,i.jsx)(n.a,{href:"https://www.testcontainers.org/",children:"https://www.testcontainers.org/"})]}),"\n"]})]})}function d(t={}){const{wrapper:n}={...(0,o.a)(),...t.components};return n?(0,i.jsx)(n,{...t,children:(0,i.jsx)(p,{...t})}):p(t)}},1151:(t,n,e)=>{e.d(n,{Z:()=>a,a:()=>s});var i=e(7294);const o={},r=i.createContext(o);function s(t){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function a(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(o):t.components||o:s(t.components),i.createElement(r.Provider,{value:n},t.children)}}}]);