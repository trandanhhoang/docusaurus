"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9573],{3639:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>c,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var r=t(5893),i=t(1151);const o={},d="Word ladder",a={id:"algorithm/wordLadder",title:"Word ladder",description:"Code in java",source:"@site/docs/algorithm/wordLadder.md",sourceDirName:"algorithm",slug:"/algorithm/wordLadder",permalink:"/docs/algorithm/wordLadder",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Max Sum Distinct Sub Array",permalink:"/docs/algorithm/msdsa"},next:{title:"Debezium",permalink:"/docs/category/debezium"}},s={},l=[{value:"Code in java",id:"code-in-java",level:2},{value:"Analysis complexity of alogrithm",id:"analysis-complexity-of-alogrithm",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",pre:"pre",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"word-ladder",children:"Word ladder"}),"\n",(0,r.jsx)(n.h2,{id:"code-in-java",children:"Code in java"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public static int ladderLength(String beginWord, String endWord, List<String> wordList) {\n        // build map\n        wordList.add(beginWord);\n        Map<String, List<String>> map = new HashMap<>();\n        for (String word : wordList) {\n            for (int i = 0; i < word.length(); i++) {\n                String pattern = word.substring(0, i) + "*" + word.substring(i + 1, word.length());\n                if (map.containsKey(pattern)) {\n                    map.get(pattern).add(word);\n                } else {\n                    List<String> listWord = new ArrayList<>();\n                    listWord.add(word);\n                    map.put(pattern, listWord);\n                }\n            }\n        }\n        // solve by BFS\n        Queue<String> queue = new LinkedList<>();\n        Set<String> visited = new HashSet<>();\n        queue.offer(beginWord);\n        visited.add(beginWord);\n\n        int res = 1;\n//        red -> ted->tex->tax\n        while (!queue.isEmpty()) {\n            int sizeQueue = queue.size();\n            for (int indexQueue = 0; indexQueue < sizeQueue; indexQueue++) {\n                String word = queue.poll();\n                if (word.equals(endWord)) {\n                    return res;\n                }\n\n                for (int i = 0; i < word.length(); i++) {\n                    String patternFromWord = word.substring(0, i) + "*" + word.substring(i + 1, word.length());\n                    for (String newWord : map.get(patternFromWord)) {\n                        if (!visited.contains(newWord)) {\n                            queue.offer(newWord);\n                            visited.add(newWord);\n                        }\n                    }\n                }\n            }\n            res++;\n        }\n\n        return 0;\n    }\n'})}),"\n",(0,r.jsx)(n.h2,{id:"analysis-complexity-of-alogrithm",children:"Analysis complexity of alogrithm"})]})}function c(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>d});var r=t(7294);const i={},o=r.createContext(i);function d(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);